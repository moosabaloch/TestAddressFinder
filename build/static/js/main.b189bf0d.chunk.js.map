{"version":3,"sources":["marker.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CenterMarker","react_default","a","createElement","width","height","alt","src","marker","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapLoad","input","ReactDOM","findDOMNode","refs","address","console","log","window","google","maps","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","setState","center","lat","location","lng","calculateDistance","lat1","lon1","lat2","lon2","dLat","toRad","dLon","Math","sin","cos","d","atan2","sqrt","round","onChange","event","defineProperty","target","name","value","setLocation","coords","latitude","longitude","state","radius","zoom","navigator","geolocation","getCurrentPosition","clearInstanceListeners","searchBox","Value","PI","className","style","lib_default","bootstrapURLKeys","key","options","mapTypeControl","streetViewControl","defaultZoom","onGoogleApiLoaded","App_CenterMarker","id","ref","toFixed","href","concat","Component","Boolean","hostname","match","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b189bf0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marker.d2a06845.png\";","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GoogleMapReact from \"google-map-react\";\nimport \"./App.css\";\nimport marker from \"./marker.png\";\n\nconst CenterMarker = () => (\n  <div>\n    <img width=\"30\" height=\"30\" alt=\"centerMarker\" src={marker} />\n  </div>\n);\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      center: {\n        lat: 59.95,\n        lng: 30.33\n      },\n      radius: 10,\n      zoom: 11,\n      address: \"\"\n    };\n  }\n  componentDidMount() {\n    if (window.navigator.geolocation) {\n      window.navigator.geolocation.getCurrentPosition(this.setLocation);\n    } else {\n      console.log(\"GeoLocation is not supported\");\n    }\n  }\n  onMapLoad = () => {\n    var input = ReactDOM.findDOMNode(this.refs.address);\n    console.log(window.google.maps);\n    var autocomplete = new window.google.maps.places.Autocomplete(input);\n    autocomplete.addListener(\"place_changed\", () => {\n      var place = autocomplete.getPlace();\n      console.log(autocomplete);\n      console.log(place);\n      if (place.geometry) {\n        this.setState({\n          center: {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n          }\n        });\n      }\n    });\n  };\n  componentWillUnmount() {\n    // https://developers.google.com/maps/documentation/javascript/events#removing\n    window.google.maps.event.clearInstanceListeners(this.searchBox);\n  }\n  calculateDistance = (lat1, lon1, lat2, lon2) => {\n    //Radius of the earth in:  1.609344 miles,  6371 km  | var R = (6371 / 1.609344);\n    var R = 3958.7558657440545; // Radius of earth in Miles\n    var dLat = this.toRad(lat2 - lat1);\n    var dLon = this.toRad(lon2 - lon1);\n    var a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRad(lat1)) *\n        Math.cos(this.toRad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c;\n    return Math.round(d);\n  };\n  toRad(Value) {\n    /** Converts numeric degrees to radians */\n    return (Value * Math.PI) / 180;\n  }\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n  setLocation = location => {\n    this.setState({\n      center: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{ height: \"70vh\", width: \"100vw\" }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: \"AIzaSyDs39h2u7BBlxTC1cqnwmtFp1mHVa4nzZ4\"\n            }}\n            center={this.state.center}\n            options={{ mapTypeControl: true, streetViewControl: true }}\n            defaultZoom={this.state.zoom}\n            onGoogleApiLoaded={this.onMapLoad}\n          >\n            <CenterMarker\n              lat={this.state.center.lat}\n              lng={this.state.center.lng}\n            />\n          </GoogleMapReact>\n        </div>\n\n        <input\n          onChange={this.onChange}\n          id=\"address\"\n          value={this.state.address}\n          name=\"address\"\n          ref=\"address\"\n        />\n        <h3>\n          You are at: <br />\n          {this.state.center.lat.toFixed(6)}, {this.state.center.lng.toFixed(6)}\n          <br />\n          <a\n            href={`https://earth.google.com/web/@${this.state.center.lat},${\n              this.state.center.lng\n            },641.30335831a`}\n            target=\"_blank\"\n          >\n            Visit on Google Earth\n          </a>\n        </h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"addressSearch\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}